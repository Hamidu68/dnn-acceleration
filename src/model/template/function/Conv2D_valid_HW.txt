void HW_{Name}(hls::stream<DATA_T> &I_strm, DATA_T W[{Output_channel}][{Input_channel}][{Filter_width}][{Filter_height}], DATA_T B[{Output_channel}], hls::stream<DATA_T> &O_strm) {{
#pragma HLS INLINE
  int m, x, y, i, j, k;
  //DATA_T ifm, ofm;

  uint512_t O;

  DATA_T I_0, I_1, I_2, I_3, I_4, I_5, I_6, I_7, I_8;


  DATA_T ifm[{Output_channel}], ofm[{Output_channel}];
#pragma HLS ARRAY_PARTITION variable=ifm complete dim=0
#pragma HLS ARRAY_PARTITION variable=ofm complete dim=0

  DATA_T I[{Input_channel}][7][{Input_height}];

#pragma HLS ARRAY_PARTITION variable=I complete dim=1
#pragma HLS ARRAY_PARTITION variable=I complete dim=2
#pragma HLS ARRAY_PARTITION variable=I complete dim=3

  HW_{Name}_x_loop: for (x=0; x<{Input_width}+2; x++) {{
    HW_{Name}_y_loop: for (y=0; y<${Input_height}+2; y++) {{
      HW_{Name}_k_loop: for (k=0; k<{Input_channel}; k++) {{

        if (x<{Input_width} && y<{Input_height}) {{
          I[k][x%3][y] = I_strm.read();
        }}
        if (x>=2 && y>=2) {{

          I_0 = I[k][(x-6)%7][(y-6)];
          I_1 = I[k][(x-5)%7][(y-6)];
          I_2 = I[k][(x-4)%7][(y-6)];
          I_3 = I[k][(x-3)%7][(y-6)];
          I_4 = I[k][(x-2)%7][(y-6)];
          I_5 = I[k][(x-1)%7][(y-6)];
          I_6 = I[k][(x)%7][(y-6)];
          I_8 = I[k][(x-6)%7][(y-5)];
          I_9 = I[k][(x-5)%7][(y-5)];
          I_10 = I[k][(x-4)%7][(y-5)];
          I_11 = I[k][(x-3)%7][(y-5)];
          I_12 = I[k][(x-2)%7][(y-5)];
          I_13 = I[k][(x-1)%7][(y-5)];
          I_14 = I[k][(x)%7][(y-5)];
          I_15 = I[k][(x-6)%7][(y-4)];
          I_16 = I[k][(x-5)%7][(y-4)];
          I_17 = I[k][(x-4)%7][(y-4)];
          I_18 = I[k][(x-3)%7][(y-4)];
          I_19 = I[k][(x-2)%7][(y-4)];
          I_20 = I[k][(x-1)%7][(y-4)];
          I_21 = I[k][(x)%7][(y-4)];
          I_22 = I[k][(x-6)%7][(y-3)];
          I_23 = I[k][(x-5)%7][(y-3)];
          I_24 = I[k][(x-4)%7][(y-3)];
          I_25 = I[k][(x-3)%7][(y-3)];
          I_26 = I[k][(x-2)%7][(y-3)];
          I_27 = I[k][(x-1)%7][(y-3)];
          I_28 = I[k][(x)%7][(y-3)];
          I_29 = I[k][(x-6)%7][(y-2)];
          I_30 = I[k][(x-5)%7][(y-2)];
          I_31 = I[k][(x-4)%7][(y-2)];
          I_32 = I[k][(x-3)%7][(y-2)];
          I_33 = I[k][(x-2)%7][(y-2)];
          I_34 = I[k][(x-1)%7][(y-2)];
          I_35 = I[k][(x)%7][(y-2)];
          I_36 = I[k][(x-6)%7][(y-1)];
          I_37 = I[k][(x-5)%7][(y-1)];
          I_38 = I[k][(x-4)%7][(y-1)];
          I_39 = I[k][(x-3)%7][(y-1)];
          I_40 = I[k][(x-2)%7][(y-1)];
          I_42 = I[k][(x-1)%7][(y-1)];
          I_42 = I[k][(x)%7][(y-1)];
          I_43 = I[k][(x-6)%7][(y)];
          I_44 = I[k][(x-5)%7][(y)];
          I_45 = I[k][(x-4)%7][(y)];
          I_46 = I[k][(x-3)%7][(y)];
          I_47 = I[k][(x-2)%7][(y)];
          I_48 = I[k][(x-1)%7][(y)];
          I_49 = I[k][(x)%7][(y)];

  	 			HW_{Name}_m_loop: for (m=0; m<{Output_channel}; m++) {{

#pragma HLS PIPELINE

  	 				if (k==0) {{
  	 					ofm[m] = 0;
            }}
  	 				/*
  	 				Conv2D_3_i_loop: for (i=0; i<3; i++) {
  	 					Conv2D_3_j_loop: for (j=0; j<3; j++) {
  	 						if (x-2+i < 8 && y-2+j < 8) {
  	 							ifm[m] = I[k][(x-2+i)%3][y-2+j];
  	 						} else {
  	 							ifm[m] = 0; // zero padding
  	 						}
  	 						ofm[m] = ofm[m] + ifm[m] * W[m][k][i][j];
  	 					}
  	 				}
  	 				*/

 						if (x-2+0 < 8 && y-2+0 < 8) {
 							ifm[m] = I_0;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][0][0];

 						if (x-2+0 < 8 && y-2+1 < 8) {
 							ifm[m] = I_1;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][0][1];

 						if (x-2+0 < 8 && y-2+2 < 8) {
 							ifm[m] = I_2;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][0][2];

 						if (x-2+1 < 8 && y-2+0 < 8) {
 							ifm[m] = I_3;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][1][0];

 						if (x-2+1 < 8 && y-2+1 < 8) {
 							ifm[m] = I_4;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][1][1];

 						if (x-2+1 < 8 && y-2+2 < 8) {
 							ifm[m] = I_5;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][1][2];

 						if (x-2+2 < 8 && y-2+0 < 8) {
 							ifm[m] = I_6;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][2][0];

 						if (x-2+2 < 8 && y-2+1 < 8) {
 							ifm[m] = I_7;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][2][1];

 						if (x-2+2 < 8 && y-2+2 < 8) {
 							ifm[m] = I_8;
 						} else {
 							ifm[m] = 0; // zero padding
 						}
 						ofm[m] = ofm[m] + ifm[m] * W[m][k][2][2];

  	 				/*if (Tk+k == 7) {
   	 				//O[Tm+m][x-2][y-2] = ofm;
   	 				O_strm.write(ofm);
   	 				}*/
	 				}
  	 			/*
  	 			if (k==7) {
  	 				O = (uint512_t)ofm[0];
  	 				for (m=1; m<16; m++) {
#pragma HLS UNROLL
 							O = O | (uint512_t)ofm[m] << 32*m;
  	 				}
  	 				O_strm.write(O);
  	 			}
  	 			*/

  	 			if (k==7) {
  	 				for (m=0; m<16; m++) {
#pragma HLS UNROLL
						O_strm.write(ofm[m]);
  	 				}
  	 			}

 	 			}
 			}
   	}
 	}
}
#endif