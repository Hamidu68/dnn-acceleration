void HW_{Name}(hls::stream<DATA_T> &I_strm, DATA_T W[{Output_channel}][{Input_channel}][{Filter_width}][{Filter_height}], DATA_T B[{Output_channel}], hls::stream<DATA_T> &O_strm) {{
#pragma HLS INLINE
	int m, x, y, i, j, k;
	DATA_T I_0, I_1, I_2, I_3, I_4, I_5, I_6;
	DATA_T I_7, I_8, I_9, I_10, I_11, I_12, I_13;
	DATA_T I_14, I_15, I_16, I_17, I_18, I_19, I_20;
	DATA_T I_21, I_22, I_23, I_24, I_25, I_26, I_27;
	DATA_T I_28, I_29, I_30, I_31, I_32, I_33, I_34;
	DATA_T I_35, I_36, I_37, I_38, I_39, I_40, I_41;
	DATA_T I_42, I_43, I_44, I_45, I_46, I_47, I_48;
	DATA_T ofm[{Output_channel}];
#pragma HLS ARRAY_PARTITION variable=ofm complete dim=0

	DATA_T I[{Input_channel}][7][{Input_height}];
#pragma HLS ARRAY_PARTITION variable=I complete dim=1
#pragma HLS ARRAY_PARTITION variable=I complete dim=2
#pragma HLS ARRAY_PARTITION variable=I complete dim=3

	HW_{Name}_x_loop: for (x = 0; x < {Input_width}; x++) {{
		HW_{Name}_y_loop: for (y = 0; y < {Input_height}; y++) {{
			HW_{Name}_k_loop: for (k = 0; k < {Input_channel}; k++) {{
				I[k][x % 7][y] = I_strm.read();
				if (x >= 6 && y >= 6) {{
					if (x % 2 == 0 && y % 2 == 0) {{
						I_0 = I[k][(x - 6) % 7][(y - 6)];
						I_1 = I[k][(x - 5) % 7][(y - 6)];
						I_2 = I[k][(x - 4) % 7][(y - 6)];
						I_3 = I[k][(x - 3) % 7][(y - 6)];
						I_4 = I[k][(x - 2) % 7][(y - 6)];
						I_5 = I[k][(x - 1) % 7][(y - 6)];
						I_6 = I[k][(x) % 7][(y - 6)];
						I_7 = I[k][(x - 6) % 7][(y - 5)];
						I_8 = I[k][(x - 5) % 7][(y - 5)];
						I_9 = I[k][(x - 4) % 7][(y - 5)];
						I_10 = I[k][(x - 3) % 7][(y - 5)];
						I_11 = I[k][(x - 2) % 7][(y - 5)];
						I_12 = I[k][(x - 1) % 7][(y - 5)];
						I_13 = I[k][(x) % 7][(y - 5)];
						I_14 = I[k][(x - 6) % 7][(y - 4)];
						I_15 = I[k][(x - 5) % 7][(y - 4)];
						I_16 = I[k][(x - 4) % 7][(y - 4)];
						I_17 = I[k][(x - 3) % 7][(y - 4)];
						I_18 = I[k][(x - 2) % 7][(y - 4)];
						I_19 = I[k][(x - 1) % 7][(y - 4)];
						I_20 = I[k][(x) % 7][(y - 4)];
						I_21 = I[k][(x - 6) % 7][(y - 3)];
						I_22 = I[k][(x - 5) % 7][(y - 3)];
						I_23 = I[k][(x - 4) % 7][(y - 3)];
						I_24 = I[k][(x - 3) % 7][(y - 3)];
						I_25 = I[k][(x - 2) % 7][(y - 3)];
						I_26 = I[k][(x - 1) % 7][(y - 3)];
						I_27 = I[k][(x) % 7][(y - 3)];
						I_28 = I[k][(x - 6) % 7][(y - 2)];
						I_29 = I[k][(x - 5) % 7][(y - 2)];
						I_30 = I[k][(x - 4) % 7][(y - 2)];
						I_31 = I[k][(x - 3) % 7][(y - 2)];
						I_32 = I[k][(x - 2) % 7][(y - 2)];
						I_33 = I[k][(x - 1) % 7][(y - 2)];
						I_34 = I[k][(x) % 7][(y - 2)];
						I_35 = I[k][(x - 6) % 7][(y - 1)];
						I_36 = I[k][(x - 5) % 7][(y - 1)];
						I_37 = I[k][(x - 4) % 7][(y - 1)];
						I_38 = I[k][(x - 3) % 7][(y - 1)];
						I_39 = I[k][(x - 2) % 7][(y - 1)];
						I_40 = I[k][(x - 1) % 7][(y - 1)];
						I_41 = I[k][(x) % 7][(y - 1)];
						I_42 = I[k][(x - 6) % 7][(y)];
						I_43 = I[k][(x - 5) % 7][(y)];
						I_44 = I[k][(x - 4) % 7][(y)];
						I_45 = I[k][(x - 3) % 7][(y)];
						I_46 = I[k][(x - 2) % 7][(y)];
						I_47 = I[k][(x - 1) % 7][(y)];
						I_48 = I[k][(x) % 7][(y)];

						HW_{Name}_m_loop: for (m = 0; m < {Output_channel}; m++) {{
#pragma HLS PIPELINE
							if (k == 0) {{
								ofm[m] = B[m];
							}}
							ofm[m] = ofm[m] + I_0 * W[m][k][0][0];
							ofm[m] = ofm[m] + I_1 * W[m][k][1][0];
							ofm[m] = ofm[m] + I_2 * W[m][k][2][0];
							ofm[m] = ofm[m] + I_3 * W[m][k][3][0];
							ofm[m] = ofm[m] + I_4 * W[m][k][4][0];
							ofm[m] = ofm[m] + I_5 * W[m][k][5][0];
							ofm[m] = ofm[m] + I_6 * W[m][k][6][0];
							ofm[m] = ofm[m] + I_7 * W[m][k][0][1];
							ofm[m] = ofm[m] + I_8 * W[m][k][1][1];
							ofm[m] = ofm[m] + I_9 * W[m][k][2][1];
							ofm[m] = ofm[m] + I_10 * W[m][k][3][1];
							ofm[m] = ofm[m] + I_11 * W[m][k][4][1];
							ofm[m] = ofm[m] + I_12 * W[m][k][5][1];
							ofm[m] = ofm[m] + I_13 * W[m][k][6][1];
							ofm[m] = ofm[m] + I_14 * W[m][k][0][2];
							ofm[m] = ofm[m] + I_15 * W[m][k][1][2];
							ofm[m] = ofm[m] + I_16 * W[m][k][2][2];
							ofm[m] = ofm[m] + I_17 * W[m][k][3][2];
							ofm[m] = ofm[m] + I_18 * W[m][k][4][2];
							ofm[m] = ofm[m] + I_19 * W[m][k][5][2];
							ofm[m] = ofm[m] + I_20 * W[m][k][6][2];
							ofm[m] = ofm[m] + I_21 * W[m][k][0][3];
							ofm[m] = ofm[m] + I_22 * W[m][k][1][3];
							ofm[m] = ofm[m] + I_23 * W[m][k][2][3];
							ofm[m] = ofm[m] + I_24 * W[m][k][3][3];
							ofm[m] = ofm[m] + I_25 * W[m][k][4][3];
							ofm[m] = ofm[m] + I_26 * W[m][k][5][3];
							ofm[m] = ofm[m] + I_27 * W[m][k][6][3];
							ofm[m] = ofm[m] + I_28 * W[m][k][0][4];
							ofm[m] = ofm[m] + I_29 * W[m][k][1][4];
							ofm[m] = ofm[m] + I_30 * W[m][k][2][4];
							ofm[m] = ofm[m] + I_31 * W[m][k][3][4];
							ofm[m] = ofm[m] + I_32 * W[m][k][4][4];
							ofm[m] = ofm[m] + I_33 * W[m][k][5][4];
							ofm[m] = ofm[m] + I_34 * W[m][k][6][4];
							ofm[m] = ofm[m] + I_35 * W[m][k][0][5];
							ofm[m] = ofm[m] + I_36 * W[m][k][1][5];
							ofm[m] = ofm[m] + I_37 * W[m][k][2][5];
							ofm[m] = ofm[m] + I_38 * W[m][k][3][5];
							ofm[m] = ofm[m] + I_39 * W[m][k][4][5];
							ofm[m] = ofm[m] + I_40 * W[m][k][5][5];
							ofm[m] = ofm[m] + I_41 * W[m][k][6][5];
							ofm[m] = ofm[m] + I_42 * W[m][k][0][6];
							ofm[m] = ofm[m] + I_43 * W[m][k][1][6];
							ofm[m] = ofm[m] + I_44 * W[m][k][2][6];
							ofm[m] = ofm[m] + I_45 * W[m][k][3][6];
							ofm[m] = ofm[m] + I_46 * W[m][k][4][6];
							ofm[m] = ofm[m] + I_47 * W[m][k][5][6];
							ofm[m] = ofm[m] + I_48 * W[m][k][6][6];
						}}
						if (k == {Input_channel} - 1) {{
							for (m = 0; m < {Output_channel}; m++) {{
#pragma HLS UNROLL
								O_strm.write(ofm[m]);
							}}
						}}
					}}
				}}
			}}
		}}
	}}
}}